#!/usr/bin/python3
"""
Motivation: extract, dereplicate, cluster, and align sequences for trees.
Author: Ian Rambo
"""
import os
import atexit
import logging
import re
import pandas as pd
#------------------------------------------------------------------------------
def check_string(source, env):
    """
    Check if string is binary (return True) or not (return False)
    """
    p = set(source)
    s = {'0', '1'}

    if s == p or p == {'0'} or p == {'1'}:
        return True
    else :
        return False
#------------------------------------------------------------------------------
def GET_BASENAME(file_path, env):
    """
    Get the basename of a file and remove all extensions
    """
    if check_string(file_path):
        file_path = file_path.decode('ascii')
    else:
        pass
    basename = os.path.basename(file_path)
    #Remove two extensions, e.g. foo.tar.gz becomes foo
    if re.match(r'^.*?\.[a-z]+\.[a-z]+$', basename):
        basename = re.findall(r'^(.*?)\.[a-z]+\.[a-z]+$', basename)[0]
    else:
        basename = os.path.splitext(basename)[0]

    if check_string(basename):
        basename = basename.decode('ascii')
    else:
        pass

    return basename
#------------------------------------------------------------------------------
def REMOVE_BUILD(source, env):
    """
    Remove intermediate build targets within a specified temporary directory.
    """
    if os.path.exists(source) and os.listdir(source):
        print('removing intermediate build targets in %s' % os.path.abspath(source))
        for tmp in [os.path.join(source, os.path.basename(str(t))) for t in BUILD_TARGETS]:
            if os.path.isfile(tmp):
                print('removing %s' % tmp)
                os.remove(tmp)
            else:
                pass

        if not os.listdir(source):
            print('removing empty directory: "%s"' % source)
            os.rmdir(source)
        else:
            print('directory "%s" is not empty' % source)
    else:
        print('Cannot delete directory "%s", does not exist' % tmpdir)
        pass
    return None
#------------------------------------------------------------------------------
def BLAST_BESTHITS(target, source, env):
    """
    Get the best hit for each target AA sequence from HMMER3 domain
    table output. The best hit is based on:
    1. min independent e-value
    2. max bitscore
    3. max alignment length
    4. max query coverage at high-scoring segment pair
    """
    blast_names = ['qseqid','sseqid','pident','length','mismatch','gapopen','qstart','qend','sstart','send','evalue','bitscore','ppos','qcovhsp','qseq']

    blasttbl = pd.read_csv(source, comment='#', header=None,
    names = blast_names, sep = '\s+')

    aggregations = {'qseqid':'first', 'evalue':min, 'ppos':max, 'bitscore':max, 'length':max, 'qcovhsp':max}
    blast_agg = blasttbl.groupby(['target_name'], as_index = False).agg(aggregations)

    blast_agg.to_csv(target, sep = '\t', encoding='utf-8', header = True, index = False)
    return None
#------------------------------------------------------------------------------
AddOption('--gff', dest='gff', type='string', nargs=1,
action='store', help='gff file')
AddOption('--seqfile', dest='seqfile', type='string', nargs=1,
action='store', help='input fasta or fastq file')
AddOption('--outdir', dest = 'outdir', type = 'string', nargs = 1,
action = 'store', help = 'path to output directory')
AddOption('--minlen', dest = 'minlen', type = 'int', nargs = 1,
action = 'store', help = 'minimum sequence length')
AddOption('--maxlen', dest = 'maxlen', type = 'int', nargs = 1,
action = 'store', default = 10000, help = 'maximum sequence length')
AddOption('--accessions', dest = 'accessions', type = 'string',
nargs = 1, action = 'store', help = 'gene accessions to target')
AddOption('--dmnd_thread', dest = 'dmnd_thread', type = 'int',
nargs = 1, default = 1, action = 'store', help = 'number of CPUs for DIAMOND')
AddOption('--dmnd_method', dest = 'dmnd_method', type = 'string',
nargs = 1, action = 'store', default = 'blastp', help = 'method for DIAMOND')
AddOption('--dmnd_db', dest = 'dmnd_db', type = 'string',
nargs = 1, action = 'store', help = 'path to DIAMOND database')
AddOption('--prefix', dest = 'prefix', type = 'string',
nargs = 1, action = 'store', help = 'run prefix ID - output file names will start with this')
AddOption('--pctid', dest = 'pctid', type = 'float',
nargs = 1, action = 'store', help = 'percent ID for USEARCH clustering')
AddOption('--rm_build', dest = 'rmbuild', action='store_true', help = 'only keep the build targets in the --outdir. Will remove build targets in the temporary build within SConstruct directory.')
#==============================================================================
#Initialize environment
env = Environment(MINLEN=GetOption('minlen'),
                          GFF=GetOption('gff'),
                          OUTDIR=GetOption('outdir'),
                          MAXLEN=GetOption('maxlen'),
                          SEQFILE=GetOption('seqfile'),
                          TARGETACC=GetOption('accessions'),
                          DMNDTHREAD=GetOption('dmnd_thread'),
                          DMNDMETHOD=GetOption('dmnd_method'),
                          DMNDDB=GetOption('dmnd_db'),
                          PREFIX=GetOption('prefix'),
                          PCTID=GetOption('pctid'))
if env['PREFIX']:
    build_tmp = env['PREFIX'] + '_build'
    SConscript(['SConscript'], exports='env', variant_dir=build_tmp, duplicate=0)

    logging_format = '%(levelname)s %(asctime)s - $(message)s'
    logging.basicConfig(filename = os.path.join(build_tmp, 'joblog'), level = logging.DEBUG, format = logging_format)
    logger = logging.getLogger()

#Add custom builders to environment
# blast_besthit_bld = Builder(action = BLAST_BESTHITS)
# basename_bld = Builder(action = GET_BASENAME)
# builders = {'BLAST_BESTHITS' : blast_besthit_bld, 'GET_BASENAME' : basename_bld}
# env.Append(BUILDERS = builders)
#------------------------------------------------------------------------------
#If --rmbuild=1, remove the build targets in the temporary directory
if GetOption('rmbuild'):
    atexit.register(REMOVE_BUILD(build_tmp))

else:
    pass

Export('env')
