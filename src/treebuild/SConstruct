#!/usr/bin/python3
"""
Motivation: extract, dereplicate, cluster, and align sequences for trees.
"""
import os
import atexit
import logging

AddOption('--gff', dest='gff', type='string', nargs=1,
action='store', help='gff file')
AddOption('--seqfile', dest='seqfile', type='string', nargs=1,
action='store', help='input fasta or fastq file')
AddOption('--outdir', dest = 'outdir', type = 'string', nargs = 1,
action = 'store', help = 'path to output directory')
AddOption('--minlen', dest = 'minlen', type = 'int', nargs = 1,
action = 'store', help = 'minimum sequence length')
AddOption('--maxlen', dest = 'maxlen', type = 'int', nargs = 1,
action = 'store', help = 'minimum sequence length')
AddOption('--accessions', dest = 'accessions', type = 'string',
nargs = 1, action = 'store', help = 'gene accessions to target')
AddOption('--dmnd_thread', dest = 'dmnd_thread', type = 'string',
nargs = 1, default = 1, action = 'store', help = 'number of CPUs for DIAMOND')
AddOption('--dmnd_method', dest = 'dmnd_method', type = 'string',
nargs = 1, action = 'store', default = 'blastp', help = 'method for DIAMOND')
AddOption('--dmnd_db', dest = 'dmnd_db', type = 'string',
nargs = 1, action = 'store', help = 'path to DIAMOND database')
AddOption('--prefix', dest = 'prefix', type = 'string',
nargs = 1, action = 'store', help = 'run prefix ID - output file names will start with this')
AddOption('--pctid', dest = 'pctid', type = 'float',
nargs = 1, action = 'store', help = 'percent ID for USEARCH clustering')
AddOption('--rm_local_build', dest = 'rmbuild', action='store_true', help = 'only keep the build targets in the --outdir. Will remove build targets in the temporary build within SConstruct directory.')

#==============================================================================
def get_basename(file_path):
    basename = os.path.basename(file_path)
    #Remove two extensions, e.g. foo.tar.gz becomes foo
    if re.match(r'^.*?\.[a-z]+\.[a-z]+$', basename):
        basename = re.findall(r'^(.*?)\.[a-z]+\.[a-z]+$', basename)[0]
    else:
        basename = os.path.splitext(basename)[0]
    return basename
#------------------------------------------------------------------------------
def remove_build_targets(tmpdir):
    """
    Remove intermediate build targets within a specified temporary directory.
    """
    if os.path.exists(tmpdir) and os.listdir(tmpdir):
        print('removing intermediate build targets in %s' % os.path.abspath(tmpdir))
        for tmp in [os.path.join(tmpdir, os.path.basename(str(t))) for t in BUILD_TARGETS]:
            if os.path.isfile(tmp):
                print('removing %s' % tmp)
                os.remove(tmp)
            else:
                pass

        if not os.listdir(tmpdir):
            print('removing empty directory: "%s"' % tmpdir)
            os.rmdir(tmpdir)
        else:
            print('directory "%s" is not empty' % tmpdir)
    else:
        print('Cannot delete directory "%s", does not exist' % tmpdir)
        pass
    return None
#==============================================================================
#Initialize environment
env = Environment(MINLEN=GetOption('minlen'),
                          GFF=GetOption('gff'),
                          OUTDIR=GetOption('outdir'),
                          MAXLEN=GetOption('maxlen'),
                          SEQFILE=GetOption('seqfile'),
                          TARGETACC=GetOption('accessions'),
                          DMNDTHREAD=GetOption('dmnd_thread'),
                          DMNDMETHOD=GetOption('dmnd_method'),
                          DMNDDB=GetOption('dmnd_db'),
                          PREFIX=GetOption('prefix'),
                          PCTID=GetOption('pctid'))
if env['PREFIX']:
    build_tmp = basename(env['PREFIX'] + '_build')
    SConscript(['SConscript'], exports='env', variant_dir=build_tmp, duplicate=0)

    logging_format = '%(levelname)s %(asctime)s - $(message)s'
    logging.basicConfig(filename = os.path.join(build_tmp, 'joblog'), level = logging.DEBUG, format = logging_format)
    logger = logging.getLogger()

bld = Builder(action = BLAST_BESTHITS)
env.Append(BUILDERS = {'BLAST_BESTHITS' : bld})
#------------------------------------------------------------------------------
#If --rmbuild=1, remove the build targets in the temporary directory
if GetOption('rmbuild'):
    atexit.register(remove_build_targets, tmpdir = build_tmp)

else:
    pass
